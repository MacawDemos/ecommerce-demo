//
//  This file was auto-generated by Macaw tools 0.9.5-CR2-SNAPSHOT version built on Fri, 29 Dec 2017 11:56:52 +0530 
//
package com.salesmanager.core.business.services.macaw;

public interface Megastore {
  /**
   * country-get-by-code
   */
  com.salesmanager.core.model.reference.country.Country countryGetByCode(String code) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-get-countries-map
   */
  java.util.Map countryGetCountriesMap(com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-get-countries
   */
  java.util.List countryGetCountries(com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-get-countries1
   */
  java.util.List countryGetCountries1(java.util.List isoCodes, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-add-country-description
   */
  com.salesmanager.core.model.reference.country.Country countryAddCountryDescription(com.salesmanager.core.model.reference.country.Country country, com.salesmanager.core.model.reference.country.CountryDescription description) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-get-by-id
   */
  com.salesmanager.core.model.reference.country.Country countryGetById(java.lang.Integer id);

  /**
   * country-count
   */
  java.lang.Long countryCount();

  /**
   * country-update
   */
  com.salesmanager.core.model.reference.country.Country countryUpdate(com.salesmanager.core.model.reference.country.Country entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-delete
   */
  void countryDelete(com.salesmanager.core.model.reference.country.Country entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-create
   */
  com.salesmanager.core.model.reference.country.Country countryCreate(com.salesmanager.core.model.reference.country.Country entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-list
   */
  java.util.List countryList();

  /**
   * country-save
   */
  com.salesmanager.core.model.reference.country.Country countrySave(com.salesmanager.core.model.reference.country.Country entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * country-flush
   */
  void countryFlush();

  /**
   * customeroption-get-by-code
   */
  com.salesmanager.core.model.customer.attribute.CustomerOption customeroptionGetByCode(com.salesmanager.core.model.merchant.MerchantStore store, String optionCode);

  /**
   * customeroption-save-or-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerOption customeroptionSaveOrUpdate(com.salesmanager.core.model.customer.attribute.CustomerOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroption-list-by-store
   */
  java.util.List customeroptionListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroption-delete
   */
  void customeroptionDelete(com.salesmanager.core.model.generic.SalesManagerEntity customerOption) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroption-delete1
   */
  void customeroptionDelete1(com.salesmanager.core.model.customer.attribute.CustomerOption customerOption) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroption-get-by-id
   */
  com.salesmanager.core.model.customer.attribute.CustomerOption customeroptionGetById(java.lang.Long id);

  /**
   * customeroption-count
   */
  java.lang.Long customeroptionCount();

  /**
   * customeroption-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerOption customeroptionUpdate(com.salesmanager.core.model.customer.attribute.CustomerOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroption-create
   */
  com.salesmanager.core.model.customer.attribute.CustomerOption customeroptionCreate(com.salesmanager.core.model.customer.attribute.CustomerOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroption-list
   */
  java.util.List customeroptionList();

  /**
   * customeroption-save
   */
  com.salesmanager.core.model.customer.attribute.CustomerOption customeroptionSave(com.salesmanager.core.model.customer.attribute.CustomerOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroption-flush
   */
  void customeroptionFlush();

  /**
   * producttype-get-product-type
   */
  com.salesmanager.core.model.catalog.product.type.ProductType producttypeGetProductType(String productTypeCode) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * producttype-get-by-id
   */
  com.salesmanager.core.model.catalog.product.type.ProductType producttypeGetById(java.lang.Long id);

  /**
   * producttype-count
   */
  java.lang.Long producttypeCount();

  /**
   * producttype-update
   */
  com.salesmanager.core.model.catalog.product.type.ProductType producttypeUpdate(com.salesmanager.core.model.catalog.product.type.ProductType entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * producttype-delete
   */
  void producttypeDelete(com.salesmanager.core.model.catalog.product.type.ProductType entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * producttype-create
   */
  com.salesmanager.core.model.catalog.product.type.ProductType producttypeCreate(com.salesmanager.core.model.catalog.product.type.ProductType entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * producttype-list
   */
  java.util.List producttypeList();

  /**
   * producttype-save
   */
  com.salesmanager.core.model.catalog.product.type.ProductType producttypeSave(com.salesmanager.core.model.catalog.product.type.ProductType entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * producttype-flush
   */
  void producttypeFlush();

  /**
   * productoption-get-by-name
   */
  java.util.List productoptionGetByName(com.salesmanager.core.model.merchant.MerchantStore store, String name, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-get-by-code
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOption productoptionGetByCode(com.salesmanager.core.model.merchant.MerchantStore store, String optionCode);

  /**
   * productoption-get-by-id
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOption productoptionGetById(com.salesmanager.core.model.merchant.MerchantStore store, java.lang.Long optionId);

  /**
   * productoption-save-or-update
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOption productoptionSaveOrUpdate(com.salesmanager.core.model.catalog.product.attribute.ProductOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-list-by-store
   */
  java.util.List productoptionListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-list-read-only
   */
  java.util.List productoptionListReadOnly(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-delete
   */
  void productoptionDelete(com.salesmanager.core.model.catalog.product.attribute.ProductOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-delete1
   */
  void productoptionDelete1(com.salesmanager.core.model.generic.SalesManagerEntity entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-get-by-id1
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOption productoptionGetById1(java.lang.Long id);

  /**
   * productoption-count
   */
  java.lang.Long productoptionCount();

  /**
   * productoption-update
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOption productoptionUpdate(com.salesmanager.core.model.catalog.product.attribute.ProductOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-create
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOption productoptionCreate(com.salesmanager.core.model.catalog.product.attribute.ProductOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-list
   */
  java.util.List productoptionList();

  /**
   * productoption-save
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOption productoptionSave(com.salesmanager.core.model.catalog.product.attribute.ProductOption entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoption-flush
   */
  void productoptionFlush();

  /**
   * customerattribute-save-or-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerAttribute customerattributeSaveOrUpdate(com.salesmanager.core.model.customer.attribute.CustomerAttribute customerAttribute) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customerattribute-get-by-customer-option-id
   */
  com.salesmanager.core.model.customer.attribute.CustomerAttribute customerattributeGetByCustomerOptionId(com.salesmanager.core.model.merchant.MerchantStore store, java.lang.Long customerId, java.lang.Long id);

  /**
   * customerattribute-get-by-customer-option-value-id
   */
  java.util.List customerattributeGetByCustomerOptionValueId(com.salesmanager.core.model.merchant.MerchantStore store, java.lang.Long id);

  /**
   * customerattribute-get-by-option-id
   */
  java.util.List customerattributeGetByOptionId(com.salesmanager.core.model.merchant.MerchantStore store, java.lang.Long id);

  /**
   * customerattribute-get-by-customer
   */
  java.util.List customerattributeGetByCustomer(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.customer.Customer customer);

  /**
   * customerattribute-delete
   */
  void customerattributeDelete(com.salesmanager.core.model.customer.attribute.CustomerAttribute attribute) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customerattribute-delete1
   */
  void customerattributeDelete1(com.salesmanager.core.model.generic.SalesManagerEntity attribute) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customerattribute-get-by-id
   */
  com.salesmanager.core.model.customer.attribute.CustomerAttribute customerattributeGetById(java.lang.Long id);

  /**
   * customerattribute-count
   */
  java.lang.Long customerattributeCount();

  /**
   * customerattribute-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerAttribute customerattributeUpdate(com.salesmanager.core.model.customer.attribute.CustomerAttribute entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customerattribute-create
   */
  com.salesmanager.core.model.customer.attribute.CustomerAttribute customerattributeCreate(com.salesmanager.core.model.customer.attribute.CustomerAttribute entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customerattribute-list
   */
  java.util.List customerattributeList();

  /**
   * customerattribute-save
   */
  com.salesmanager.core.model.customer.attribute.CustomerAttribute customerattributeSave(com.salesmanager.core.model.customer.attribute.CustomerAttribute entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customerattribute-flush
   */
  void customerattributeFlush();

  /**
   * currency-get-by-code
   */
  com.salesmanager.core.model.reference.currency.Currency currencyGetByCode(String code);

  /**
   * currency-get-by-id
   */
  com.salesmanager.core.model.reference.currency.Currency currencyGetById(java.lang.Long id);

  /**
   * currency-count
   */
  java.lang.Long currencyCount();

  /**
   * currency-update
   */
  com.salesmanager.core.model.reference.currency.Currency currencyUpdate(com.salesmanager.core.model.reference.currency.Currency entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * currency-delete
   */
  void currencyDelete(com.salesmanager.core.model.reference.currency.Currency entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * currency-create
   */
  com.salesmanager.core.model.reference.currency.Currency currencyCreate(com.salesmanager.core.model.reference.currency.Currency entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * currency-list
   */
  java.util.List currencyList();

  /**
   * currency-save
   */
  com.salesmanager.core.model.reference.currency.Currency currencySave(com.salesmanager.core.model.reference.currency.Currency entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * currency-flush
   */
  void currencyFlush();

  /**
   * shoppingcartcalculation-calculate
   */
  com.salesmanager.core.model.order.OrderTotalSummary shoppingcartcalculationCalculate(com.salesmanager.core.model.shoppingcart.ShoppingCart cartModel, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcartcalculation-calculate1
   */
  com.salesmanager.core.model.order.OrderTotalSummary shoppingcartcalculationCalculate1(com.salesmanager.core.model.shoppingcart.ShoppingCart cartModel, com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * orderproductdownload-get-by-order-id
   */
  java.util.List orderproductdownloadGetByOrderId(java.lang.Long orderId);

  /**
   * orderproductdownload-get-by-id
   */
  com.salesmanager.core.model.order.orderproduct.OrderProductDownload orderproductdownloadGetById(java.lang.Long id);

  /**
   * orderproductdownload-count
   */
  java.lang.Long orderproductdownloadCount();

  /**
   * orderproductdownload-update
   */
  com.salesmanager.core.model.order.orderproduct.OrderProductDownload orderproductdownloadUpdate(com.salesmanager.core.model.order.orderproduct.OrderProductDownload entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * orderproductdownload-delete
   */
  void orderproductdownloadDelete(com.salesmanager.core.model.order.orderproduct.OrderProductDownload entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * orderproductdownload-create
   */
  com.salesmanager.core.model.order.orderproduct.OrderProductDownload orderproductdownloadCreate(com.salesmanager.core.model.order.orderproduct.OrderProductDownload entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * orderproductdownload-list
   */
  java.util.List orderproductdownloadList();

  /**
   * orderproductdownload-save
   */
  com.salesmanager.core.model.order.orderproduct.OrderProductDownload orderproductdownloadSave(com.salesmanager.core.model.order.orderproduct.OrderProductDownload entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * orderproductdownload-flush
   */
  void orderproductdownloadFlush();

  /**
   * merchantstore-get-by-code
   */
  com.salesmanager.core.model.merchant.MerchantStore merchantstoreGetByCode(String code) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantstore-save-or-update
   */
  com.salesmanager.core.model.merchant.MerchantStore merchantstoreSaveOrUpdate(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantstore-get-merchant-store
   */
  com.salesmanager.core.model.merchant.MerchantStore merchantstoreGetMerchantStore(String merchantStoreCode) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantstore-get-by-id
   */
  com.salesmanager.core.model.merchant.MerchantStore merchantstoreGetById(java.lang.Integer id);

  /**
   * merchantstore-count
   */
  java.lang.Long merchantstoreCount();

  /**
   * merchantstore-update
   */
  com.salesmanager.core.model.merchant.MerchantStore merchantstoreUpdate(com.salesmanager.core.model.merchant.MerchantStore entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantstore-delete
   */
  void merchantstoreDelete(com.salesmanager.core.model.merchant.MerchantStore entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantstore-create
   */
  com.salesmanager.core.model.merchant.MerchantStore merchantstoreCreate(com.salesmanager.core.model.merchant.MerchantStore entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantstore-list
   */
  java.util.List merchantstoreList();

  /**
   * merchantstore-save
   */
  com.salesmanager.core.model.merchant.MerchantStore merchantstoreSave(com.salesmanager.core.model.merchant.MerchantStore entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantstore-flush
   */
  void merchantstoreFlush();

  /**
   * language-get-by-code
   */
  com.salesmanager.core.model.reference.language.Language languageGetByCode(String code) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * language-to-locale
   */
  java.util.Locale languageToLocale(com.salesmanager.core.model.reference.language.Language language);

  /**
   * language-get-languages-map
   */
  java.util.Map languageGetLanguagesMap() throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * language-get-languages
   */
  java.util.List languageGetLanguages() throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * language-to-language
   */
  com.salesmanager.core.model.reference.language.Language languageToLanguage(java.util.Locale locale);

  /**
   * language-default-language
   */
  com.salesmanager.core.model.reference.language.Language languageDefaultLanguage();

  /**
   * language-get-by-id
   */
  com.salesmanager.core.model.reference.language.Language languageGetById(java.lang.Integer id);

  /**
   * language-count
   */
  java.lang.Long languageCount();

  /**
   * language-update
   */
  com.salesmanager.core.model.reference.language.Language languageUpdate(com.salesmanager.core.model.reference.language.Language entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * language-delete
   */
  void languageDelete(com.salesmanager.core.model.reference.language.Language entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * language-create
   */
  com.salesmanager.core.model.reference.language.Language languageCreate(com.salesmanager.core.model.reference.language.Language entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * language-list
   */
  java.util.List languageList();

  /**
   * language-save
   */
  com.salesmanager.core.model.reference.language.Language languageSave(com.salesmanager.core.model.reference.language.Language entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * language-flush
   */
  void languageFlush();

  /**
   * shoppingcart-get-by-code
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartGetByCode(String code, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-get-by-id
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartGetById(java.lang.Long id, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-get-by-id1
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartGetById1(java.lang.Long id);

  /**
   * shoppingcart-get-by-id2
   */
  com.salesmanager.core.model.generic.SalesManagerEntity shoppingcartGetById2(java.io.Serializable id);

  /**
   * shoppingcart-save-or-update
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartSaveOrUpdate(com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingCart) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-requires-shipping
   */
  boolean shoppingcartRequiresShipping(com.salesmanager.core.model.shoppingcart.ShoppingCart cart) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-get-by-customer
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartGetByCustomer(com.salesmanager.core.model.customer.Customer customer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-get-shopping-cart
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartGetShoppingCart(com.salesmanager.core.model.customer.Customer customer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-delete-cart
   */
  void shoppingcartDeleteCart(com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingCart) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-populate-shopping-cart-item
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCartItem shoppingcartPopulateShoppingCartItem(com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-create-shipping-product
   */
  java.util.List shoppingcartCreateShippingProduct(com.salesmanager.core.model.shoppingcart.ShoppingCart cart) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-is-free-shopping-cart
   */
  boolean shoppingcartIsFreeShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart cart) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-is-free-shopping-cart1
   */
  boolean shoppingcartIsFreeShoppingCart1(java.util.List items) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-remove-shopping-cart
   */
  void shoppingcartRemoveShoppingCart(com.salesmanager.core.model.shoppingcart.ShoppingCart cart) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-merge-shopping-carts
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartMergeShoppingCarts(com.salesmanager.core.model.shoppingcart.ShoppingCart userShoppingModel, com.salesmanager.core.model.shoppingcart.ShoppingCart sessionCart, com.salesmanager.core.model.merchant.MerchantStore store);

  /**
   * shoppingcart-delete-shopping-cart-item
   */
  void shoppingcartDeleteShoppingCartItem(java.lang.Long id);

  /**
   * shoppingcart-count
   */
  java.lang.Long shoppingcartCount();

  /**
   * shoppingcart-update
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartUpdate(com.salesmanager.core.model.shoppingcart.ShoppingCart entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-delete
   */
  void shoppingcartDelete(com.salesmanager.core.model.shoppingcart.ShoppingCart entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-create
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartCreate(com.salesmanager.core.model.shoppingcart.ShoppingCart entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-list
   */
  java.util.List shoppingcartList();

  /**
   * shoppingcart-save
   */
  com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingcartSave(com.salesmanager.core.model.shoppingcart.ShoppingCart entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shoppingcart-flush
   */
  void shoppingcartFlush();

  /**
   * productprice-save-or-update
   */
  com.salesmanager.core.model.catalog.product.price.ProductPrice productpriceSaveOrUpdate(com.salesmanager.core.model.catalog.product.price.ProductPrice price) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productprice-add-description
   */
  com.salesmanager.core.model.catalog.product.price.ProductPrice productpriceAddDescription(com.salesmanager.core.model.catalog.product.price.ProductPrice price, com.salesmanager.core.model.catalog.product.price.ProductPriceDescription description) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productprice-delete
   */
  void productpriceDelete(com.salesmanager.core.model.catalog.product.price.ProductPrice price) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productprice-delete1
   */
  void productpriceDelete1(com.salesmanager.core.model.generic.SalesManagerEntity price) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productprice-get-by-id
   */
  com.salesmanager.core.model.catalog.product.price.ProductPrice productpriceGetById(java.lang.Long id);

  /**
   * productprice-count
   */
  java.lang.Long productpriceCount();

  /**
   * productprice-update
   */
  com.salesmanager.core.model.catalog.product.price.ProductPrice productpriceUpdate(com.salesmanager.core.model.catalog.product.price.ProductPrice entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productprice-create
   */
  com.salesmanager.core.model.catalog.product.price.ProductPrice productpriceCreate(com.salesmanager.core.model.catalog.product.price.ProductPrice entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productprice-list
   */
  java.util.List productpriceList();

  /**
   * productprice-save
   */
  com.salesmanager.core.model.catalog.product.price.ProductPrice productpriceSave(com.salesmanager.core.model.catalog.product.price.ProductPrice entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productprice-flush
   */
  void productpriceFlush();

  /**
   * transaction-list-transactions
   */
  java.util.List transactionListTransactions(com.salesmanager.core.model.order.Order order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-get-capturable-transaction
   */
  com.salesmanager.core.model.payments.Transaction transactionGetCapturableTransaction(com.salesmanager.core.model.order.Order order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-get-refundable-transaction
   */
  com.salesmanager.core.model.payments.Transaction transactionGetRefundableTransaction(com.salesmanager.core.model.order.Order order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-create
   */
  com.salesmanager.core.model.payments.Transaction transactionCreate(com.salesmanager.core.model.payments.Transaction transaction) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-create1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity transactionCreate1(com.salesmanager.core.model.generic.SalesManagerEntity transaction) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-get-by-id
   */
  com.salesmanager.core.model.payments.Transaction transactionGetById(java.lang.Long id);

  /**
   * transaction-count
   */
  java.lang.Long transactionCount();

  /**
   * transaction-update
   */
  com.salesmanager.core.model.payments.Transaction transactionUpdate(com.salesmanager.core.model.payments.Transaction entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-delete
   */
  void transactionDelete(com.salesmanager.core.model.payments.Transaction entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-list
   */
  java.util.List transactionList();

  /**
   * transaction-save
   */
  com.salesmanager.core.model.payments.Transaction transactionSave(com.salesmanager.core.model.payments.Transaction entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * transaction-flush
   */
  void transactionFlush();

  /**
   * productoptionvalue-get-by-name
   */
  java.util.List productoptionvalueGetByName(com.salesmanager.core.model.merchant.MerchantStore store, String name, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-get-by-code
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue productoptionvalueGetByCode(com.salesmanager.core.model.merchant.MerchantStore store, String optionValueCode);

  /**
   * productoptionvalue-get-by-id
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue productoptionvalueGetById(com.salesmanager.core.model.merchant.MerchantStore store, java.lang.Long optionValueId);

  /**
   * productoptionvalue-save-or-update
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue productoptionvalueSaveOrUpdate(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-list-by-store
   */
  java.util.List productoptionvalueListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-list-by-store-no-read-only
   */
  java.util.List productoptionvalueListByStoreNoReadOnly(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-delete
   */
  void productoptionvalueDelete(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-delete1
   */
  void productoptionvalueDelete1(com.salesmanager.core.model.generic.SalesManagerEntity entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-get-by-id1
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue productoptionvalueGetById1(java.lang.Long id);

  /**
   * productoptionvalue-count
   */
  java.lang.Long productoptionvalueCount();

  /**
   * productoptionvalue-update
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue productoptionvalueUpdate(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-create
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue productoptionvalueCreate(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-list
   */
  java.util.List productoptionvalueList();

  /**
   * productoptionvalue-save
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue productoptionvalueSave(com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productoptionvalue-flush
   */
  void productoptionvalueFlush();

  /**
   * ordertotal-find-order-total-variation
   */
  com.salesmanager.core.model.order.OrderTotalVariation ordertotalFindOrderTotalVariation(com.salesmanager.core.model.order.OrderSummary summary, com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language);

  /**
   * shippingorigin-get-by-store
   */
  com.salesmanager.core.model.shipping.ShippingOrigin shippingoriginGetByStore(com.salesmanager.core.model.merchant.MerchantStore store);

  /**
   * shippingorigin-get-by-id
   */
  com.salesmanager.core.model.shipping.ShippingOrigin shippingoriginGetById(java.lang.Long id);

  /**
   * shippingorigin-count
   */
  java.lang.Long shippingoriginCount();

  /**
   * shippingorigin-update
   */
  com.salesmanager.core.model.shipping.ShippingOrigin shippingoriginUpdate(com.salesmanager.core.model.shipping.ShippingOrigin entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shippingorigin-delete
   */
  void shippingoriginDelete(com.salesmanager.core.model.shipping.ShippingOrigin entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shippingorigin-create
   */
  com.salesmanager.core.model.shipping.ShippingOrigin shippingoriginCreate(com.salesmanager.core.model.shipping.ShippingOrigin entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shippingorigin-list
   */
  java.util.List shippingoriginList();

  /**
   * shippingorigin-save
   */
  com.salesmanager.core.model.shipping.ShippingOrigin shippingoriginSave(com.salesmanager.core.model.shipping.ShippingOrigin entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shippingorigin-flush
   */
  void shippingoriginFlush();

  /**
   * customeroptionset-save-or-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionSet customeroptionsetSaveOrUpdate(com.salesmanager.core.model.customer.attribute.CustomerOptionSet entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-list-by-option
   */
  java.util.List customeroptionsetListByOption(com.salesmanager.core.model.customer.attribute.CustomerOption option, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-list-by-store
   */
  java.util.List customeroptionsetListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-list-by-option-value
   */
  java.util.List customeroptionsetListByOptionValue(com.salesmanager.core.model.customer.attribute.CustomerOptionValue optionValue, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-delete
   */
  void customeroptionsetDelete(com.salesmanager.core.model.customer.attribute.CustomerOptionSet customerOptionSet) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-delete1
   */
  void customeroptionsetDelete1(com.salesmanager.core.model.generic.SalesManagerEntity customerOptionSet) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-get-by-id
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionSet customeroptionsetGetById(java.lang.Long id);

  /**
   * customeroptionset-count
   */
  java.lang.Long customeroptionsetCount();

  /**
   * customeroptionset-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionSet customeroptionsetUpdate(com.salesmanager.core.model.customer.attribute.CustomerOptionSet entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-create
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionSet customeroptionsetCreate(com.salesmanager.core.model.customer.attribute.CustomerOptionSet entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-list
   */
  java.util.List customeroptionsetList();

  /**
   * customeroptionset-save
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionSet customeroptionsetSave(com.salesmanager.core.model.customer.attribute.CustomerOptionSet entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionset-flush
   */
  void customeroptionsetFlush();

  /**
   * category-get-by-name
   */
  java.util.List categoryGetByName(com.salesmanager.core.model.merchant.MerchantStore store, String name, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-get-description
   */
  com.salesmanager.core.model.catalog.category.CategoryDescription categoryGetDescription(com.salesmanager.core.model.catalog.category.Category category, com.salesmanager.core.model.reference.language.Language language);

  /**
   * category-get-by-language
   */
  com.salesmanager.core.model.catalog.category.Category categoryGetByLanguage(long categoryId, com.salesmanager.core.model.reference.language.Language language);

  /**
   * category-get-by-code
   */
  com.salesmanager.core.model.catalog.category.Category categoryGetByCode(String storeCode, String code) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-get-by-code1
   */
  com.salesmanager.core.model.catalog.category.Category categoryGetByCode1(com.salesmanager.core.model.merchant.MerchantStore store, String code) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-get-by-id
   */
  com.salesmanager.core.model.catalog.category.Category categoryGetById(java.lang.Long id);

  /**
   * category-get-by-id1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity categoryGetById1(java.io.Serializable id);

  /**
   * category-save-or-update
   */
  com.salesmanager.core.model.catalog.category.Category categorySaveOrUpdate(com.salesmanager.core.model.catalog.category.Category category) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-get-by-se-url
   */
  com.salesmanager.core.model.catalog.category.Category categoryGetBySeUrl(com.salesmanager.core.model.merchant.MerchantStore store, String seUrl);

  /**
   * category-list-by-store
   */
  java.util.List categoryListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-store1
   */
  java.util.List categoryListByStore1(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-lineage
   */
  java.util.List categoryListByLineage(com.salesmanager.core.model.merchant.MerchantStore store, String lineage) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-lineage1
   */
  java.util.List categoryListByLineage1(String storeCode, String lineage) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-se-url
   */
  java.util.List categoryListBySeUrl(com.salesmanager.core.model.merchant.MerchantStore store, String seUrl) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-add-child
   */
  void categoryAddChild(com.salesmanager.core.model.catalog.category.Category parent, com.salesmanager.core.model.catalog.category.Category child) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-parent
   */
  java.util.List categoryListByParent(com.salesmanager.core.model.catalog.category.Category category, com.salesmanager.core.model.reference.language.Language language);

  /**
   * category-list-by-parent1
   */
  java.util.List categoryListByParent1(com.salesmanager.core.model.catalog.category.Category category) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-store-and-parent
   */
  java.util.List categoryListByStoreAndParent(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.category.Category category) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-add-category-description
   */
  void categoryAddCategoryDescription(com.salesmanager.core.model.catalog.category.Category category, com.salesmanager.core.model.catalog.category.CategoryDescription description) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-depth
   */
  java.util.List categoryListByDepth(com.salesmanager.core.model.merchant.MerchantStore store, int depth);

  /**
   * category-list-by-depth1
   */
  java.util.List categoryListByDepth1(com.salesmanager.core.model.merchant.MerchantStore store, int depth, com.salesmanager.core.model.reference.language.Language language);

  /**
   * category-count-products-by-categories
   */
  java.util.List categoryCountProductsByCategories(com.salesmanager.core.model.merchant.MerchantStore store, java.util.List categoryIds) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list-by-codes
   */
  java.util.List categoryListByCodes(com.salesmanager.core.model.merchant.MerchantStore store, java.util.List codes, com.salesmanager.core.model.reference.language.Language language);

  /**
   * category-list-by-ids
   */
  java.util.List categoryListByIds(com.salesmanager.core.model.merchant.MerchantStore store, java.util.List ids, com.salesmanager.core.model.reference.language.Language language);

  /**
   * category-delete
   */
  void categoryDelete(com.salesmanager.core.model.catalog.category.Category category) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-delete1
   */
  void categoryDelete1(com.salesmanager.core.model.generic.SalesManagerEntity category) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-create
   */
  com.salesmanager.core.model.catalog.category.Category categoryCreate(com.salesmanager.core.model.catalog.category.Category category) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-create1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity categoryCreate1(com.salesmanager.core.model.generic.SalesManagerEntity category) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-count
   */
  java.lang.Long categoryCount();

  /**
   * category-update
   */
  com.salesmanager.core.model.catalog.category.Category categoryUpdate(com.salesmanager.core.model.catalog.category.Category entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-list
   */
  java.util.List categoryList();

  /**
   * category-save
   */
  com.salesmanager.core.model.catalog.category.Category categorySave(com.salesmanager.core.model.catalog.category.Category entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * category-flush
   */
  void categoryFlush();

  /**
   * merchantconfiguration-list-by-type
   */
  java.util.List merchantconfigurationListByType(com.salesmanager.core.model.system.MerchantConfigurationType type, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-save-or-update
   */
  com.salesmanager.core.model.system.MerchantConfiguration merchantconfigurationSaveOrUpdate(com.salesmanager.core.model.system.MerchantConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-get-merchant-configuration
   */
  com.salesmanager.core.model.system.MerchantConfiguration merchantconfigurationGetMerchantConfiguration(String key, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-list-by-store
   */
  java.util.List merchantconfigurationListByStore(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-save-merchant-config
   */
  com.salesmanager.core.model.system.MerchantConfig merchantconfigurationSaveMerchantConfig(com.salesmanager.core.model.system.MerchantConfig config, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-get-merchant-config
   */
  com.salesmanager.core.model.system.MerchantConfig merchantconfigurationGetMerchantConfig(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-delete
   */
  void merchantconfigurationDelete(com.salesmanager.core.model.system.MerchantConfiguration merchantConfiguration) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-delete1
   */
  void merchantconfigurationDelete1(com.salesmanager.core.model.generic.SalesManagerEntity merchantConfiguration) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-get-by-id
   */
  com.salesmanager.core.model.system.MerchantConfiguration merchantconfigurationGetById(java.lang.Long id);

  /**
   * merchantconfiguration-count
   */
  java.lang.Long merchantconfigurationCount();

  /**
   * merchantconfiguration-update
   */
  com.salesmanager.core.model.system.MerchantConfiguration merchantconfigurationUpdate(com.salesmanager.core.model.system.MerchantConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-create
   */
  com.salesmanager.core.model.system.MerchantConfiguration merchantconfigurationCreate(com.salesmanager.core.model.system.MerchantConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-list
   */
  java.util.List merchantconfigurationList();

  /**
   * merchantconfiguration-save
   */
  com.salesmanager.core.model.system.MerchantConfiguration merchantconfigurationSave(com.salesmanager.core.model.system.MerchantConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantconfiguration-flush
   */
  void merchantconfigurationFlush();

  /**
   * content-list-by-type
   */
  java.util.List contentListByType(java.util.List contentType, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-list-by-type1
   */
  java.util.List contentListByType1(com.salesmanager.core.model.content.ContentType contentType, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-list-by-type2
   */
  java.util.List contentListByType2(java.util.List contentType, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-by-language
   */
  com.salesmanager.core.model.content.Content contentGetByLanguage(java.lang.Long id, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-list-name-by-type
   */
  java.util.List contentListNameByType(java.util.List contentType, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-by-code
   */
  com.salesmanager.core.model.content.Content contentGetByCode(String code, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-by-code1
   */
  com.salesmanager.core.model.content.Content contentGetByCode1(String code, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-by-id
   */
  com.salesmanager.core.model.content.Content contentGetById(java.lang.Long id);

  /**
   * content-get-by-id1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity contentGetById1(java.io.Serializable id);

  /**
   * content-save-or-update
   */
  com.salesmanager.core.model.content.Content contentSaveOrUpdate(com.salesmanager.core.model.content.Content content) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-add-content-file
   */
  void contentAddContentFile(String merchantStoreCode, com.salesmanager.core.model.content.InputContentFile contentFile) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-add-logo
   */
  void contentAddLogo(String merchantStoreCode, com.salesmanager.core.model.content.InputContentFile cmsContentImage) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-add-option-image
   */
  void contentAddOptionImage(String merchantStoreCode, com.salesmanager.core.model.content.InputContentFile cmsContentImage) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-add-content-files
   */
  void contentAddContentFiles(String merchantStoreCode, java.util.List contentFilesList) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-remove-file
   */
  void contentRemoveFile(String merchantStoreCode, com.salesmanager.core.model.content.FileContentType fileContentType, String fileName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-remove-files
   */
  void contentRemoveFiles(String merchantStoreCode) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-content-file
   */
  com.salesmanager.core.model.content.OutputContentFile contentGetContentFile(String merchantStoreCode, com.salesmanager.core.model.content.FileContentType fileContentType, String fileName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-content-files
   */
  java.util.List contentGetContentFiles(String merchantStoreCode, com.salesmanager.core.model.content.FileContentType fileContentType) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-content-files-names
   */
  java.util.List contentGetContentFilesNames(String merchantStoreCode, com.salesmanager.core.model.content.FileContentType fileContentType) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-get-by-se-url
   */
  com.salesmanager.core.model.content.ContentDescription contentGetBySeUrl(com.salesmanager.core.model.merchant.MerchantStore store, String seUrl);

  /**
   * content-delete
   */
  void contentDelete(com.salesmanager.core.model.generic.SalesManagerEntity content) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-delete1
   */
  void contentDelete1(com.salesmanager.core.model.content.Content content) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-count
   */
  java.lang.Long contentCount();

  /**
   * content-update
   */
  com.salesmanager.core.model.content.Content contentUpdate(com.salesmanager.core.model.content.Content entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-create
   */
  com.salesmanager.core.model.content.Content contentCreate(com.salesmanager.core.model.content.Content entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-list
   */
  java.util.List contentList();

  /**
   * content-save
   */
  com.salesmanager.core.model.content.Content contentSave(com.salesmanager.core.model.content.Content entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * content-flush
   */
  void contentFlush();

  /**
   * customer-get-by-name
   */
  java.util.List customerGetByName(String firstName);

  /**
   * customer-get-customer-address
   */
  com.salesmanager.core.model.common.Address customerGetCustomerAddress(com.salesmanager.core.model.merchant.MerchantStore store, String ipAddress) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customer-get-by-id
   */
  com.salesmanager.core.model.generic.SalesManagerEntity customerGetById(java.io.Serializable id);

  /**
   * customer-get-by-id1
   */
  com.salesmanager.core.model.customer.Customer customerGetById1(java.lang.Long id);

  /**
   * customer-save-or-update
   */
  com.salesmanager.core.model.customer.Customer customerSaveOrUpdate(com.salesmanager.core.model.customer.Customer customer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customer-list-by-store
   */
  java.util.List customerListByStore(com.salesmanager.core.model.merchant.MerchantStore store);

  /**
   * customer-list-by-store1
   */
  com.salesmanager.core.model.customer.CustomerList customerListByStore1(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.customer.CustomerCriteria criteria);

  /**
   * customer-get-by-nick
   */
  com.salesmanager.core.model.customer.Customer customerGetByNick(String nick);

  /**
   * customer-get-by-nick1
   */
  com.salesmanager.core.model.customer.Customer customerGetByNick1(String nick, int storeId);

  /**
   * customer-delete
   */
  void customerDelete(com.salesmanager.core.model.generic.SalesManagerEntity customer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customer-delete1
   */
  void customerDelete1(com.salesmanager.core.model.customer.Customer customer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customer-count
   */
  java.lang.Long customerCount();

  /**
   * customer-update
   */
  com.salesmanager.core.model.customer.Customer customerUpdate(com.salesmanager.core.model.customer.Customer entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customer-create
   */
  com.salesmanager.core.model.customer.Customer customerCreate(com.salesmanager.core.model.customer.Customer entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customer-list
   */
  java.util.List customerList();

  /**
   * customer-save
   */
  com.salesmanager.core.model.customer.Customer customerSave(com.salesmanager.core.model.customer.Customer entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customer-flush
   */
  void customerFlush();

  /**
   * shipping-get-shipping-configuration
   */
  com.salesmanager.core.model.system.IntegrationConfiguration shippingGetShippingConfiguration(String moduleCode, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-shipping-configuration1
   */
  com.salesmanager.core.model.shipping.ShippingConfiguration shippingGetShippingConfiguration1(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-custom-shipping-configuration
   */
  com.salesmanager.core.model.system.CustomIntegrationConfiguration shippingGetCustomShippingConfiguration(String moduleCode, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-save-shipping-configuration
   */
  com.salesmanager.core.model.shipping.ShippingConfiguration shippingSaveShippingConfiguration(com.salesmanager.core.model.shipping.ShippingConfiguration shippingConfiguration, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-save-custom-shipping-configuration
   */
  com.salesmanager.core.model.system.CustomIntegrationConfiguration shippingSaveCustomShippingConfiguration(String moduleCode, com.salesmanager.core.model.system.CustomIntegrationConfiguration shippingConfiguration, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-supported-countries
   */
  java.util.List shippingGetSupportedCountries(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-ship-to-country-list
   */
  java.util.List shippingGetShipToCountryList(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-set-supported-countries
   */
  void shippingSetSupportedCountries(com.salesmanager.core.model.merchant.MerchantStore store, java.util.List countryCodes) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-packages-details
   */
  java.util.List shippingGetPackagesDetails(java.util.List products, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-requires-shipping
   */
  boolean shippingRequiresShipping(java.util.List items, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-shipping-methods
   */
  java.util.List shippingGetShippingMethods(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-save-shipping-quote-module-configuration
   */
  com.salesmanager.core.model.system.IntegrationConfiguration shippingSaveShippingQuoteModuleConfiguration(com.salesmanager.core.model.system.IntegrationConfiguration configuration, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-remove-shipping-quote-module-configuration
   */
  void shippingRemoveShippingQuoteModuleConfiguration(String moduleCode, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-remove-custom-shipping-quote-module-configuration
   */
  void shippingRemoveCustomShippingQuoteModuleConfiguration(String moduleCode, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-shipping-modules-configured
   */
  java.util.Map shippingGetShippingModulesConfigured(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-shipping-summary
   */
  com.salesmanager.core.model.shipping.ShippingSummary shippingGetShippingSummary(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.shipping.ShippingQuote shippingQuote, com.salesmanager.core.model.shipping.ShippingOption selectedShippingOption) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-shipping-quote
   */
  com.salesmanager.core.model.shipping.ShippingQuote shippingGetShippingQuote(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.common.Delivery delivery, java.util.List products, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * shipping-get-shipping-meta-data
   */
  com.salesmanager.core.model.shipping.ShippingMetaData shippingGetShippingMetaData(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * moduleconfiguration-get-by-code
   */
  com.salesmanager.core.model.system.IntegrationModule moduleconfigurationGetByCode(String moduleCode);

  /**
   * moduleconfiguration-create-or-update-module
   */
  void moduleconfigurationCreateOrUpdateModule(String json) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * moduleconfiguration-get-integration-modules
   */
  java.util.List moduleconfigurationGetIntegrationModules(String module);

  /**
   * moduleconfiguration-get-by-id
   */
  com.salesmanager.core.model.system.IntegrationModule moduleconfigurationGetById(java.lang.Long id);

  /**
   * moduleconfiguration-count
   */
  java.lang.Long moduleconfigurationCount();

  /**
   * moduleconfiguration-update
   */
  com.salesmanager.core.model.system.IntegrationModule moduleconfigurationUpdate(com.salesmanager.core.model.system.IntegrationModule entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * moduleconfiguration-delete
   */
  void moduleconfigurationDelete(com.salesmanager.core.model.system.IntegrationModule entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * moduleconfiguration-create
   */
  com.salesmanager.core.model.system.IntegrationModule moduleconfigurationCreate(com.salesmanager.core.model.system.IntegrationModule entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * moduleconfiguration-list
   */
  java.util.List moduleconfigurationList();

  /**
   * moduleconfiguration-save
   */
  com.salesmanager.core.model.system.IntegrationModule moduleconfigurationSave(com.salesmanager.core.model.system.IntegrationModule entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * moduleconfiguration-flush
   */
  void moduleconfigurationFlush();

  /**
   * productrelationship-save-or-update
   */
  com.salesmanager.core.model.catalog.product.relationship.ProductRelationship productrelationshipSaveOrUpdate(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship relationship) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-groups
   */
  java.util.List productrelationshipGetGroups(com.salesmanager.core.model.merchant.MerchantStore store);

  /**
   * productrelationship-add-group
   */
  void productrelationshipAddGroup(com.salesmanager.core.model.merchant.MerchantStore store, String groupName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-by-group
   */
  java.util.List productrelationshipGetByGroup(com.salesmanager.core.model.merchant.MerchantStore store, String groupName, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-by-group1
   */
  java.util.List productrelationshipGetByGroup1(com.salesmanager.core.model.merchant.MerchantStore store, String groupName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-delete-group
   */
  void productrelationshipDeleteGroup(com.salesmanager.core.model.merchant.MerchantStore store, String groupName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-deactivate-group
   */
  void productrelationshipDeactivateGroup(com.salesmanager.core.model.merchant.MerchantStore store, String groupName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-activate-group
   */
  void productrelationshipActivateGroup(com.salesmanager.core.model.merchant.MerchantStore store, String groupName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-by-type
   */
  java.util.List productrelationshipGetByType(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.relationship.ProductRelationshipType type) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-by-type1
   */
  java.util.List productrelationshipGetByType1(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.relationship.ProductRelationshipType type, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-by-type2
   */
  java.util.List productrelationshipGetByType2(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.catalog.product.relationship.ProductRelationshipType type, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-by-type3
   */
  java.util.List productrelationshipGetByType3(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.catalog.product.relationship.ProductRelationshipType type) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-list-by-product
   */
  java.util.List productrelationshipListByProduct(com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-delete
   */
  void productrelationshipDelete(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship relationship) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-delete1
   */
  void productrelationshipDelete1(com.salesmanager.core.model.generic.SalesManagerEntity relationship) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-get-by-id
   */
  com.salesmanager.core.model.catalog.product.relationship.ProductRelationship productrelationshipGetById(java.lang.Long id);

  /**
   * productrelationship-count
   */
  java.lang.Long productrelationshipCount();

  /**
   * productrelationship-update
   */
  com.salesmanager.core.model.catalog.product.relationship.ProductRelationship productrelationshipUpdate(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-create
   */
  com.salesmanager.core.model.catalog.product.relationship.ProductRelationship productrelationshipCreate(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-list
   */
  java.util.List productrelationshipList();

  /**
   * productrelationship-save
   */
  com.salesmanager.core.model.catalog.product.relationship.ProductRelationship productrelationshipSave(com.salesmanager.core.model.catalog.product.relationship.ProductRelationship entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productrelationship-flush
   */
  void productrelationshipFlush();

  /**
   * initializationdatabaseimpl-populate
   */
  void initializationdatabaseimplPopulate(String contextName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * initializationdatabaseimpl-is-empty
   */
  boolean initializationdatabaseimplIsEmpty();

  /**
   * zone-get-by-code
   */
  com.salesmanager.core.model.reference.zone.Zone zoneGetByCode(String code);

  /**
   * zone-add-description
   */
  com.salesmanager.core.model.reference.zone.Zone zoneAddDescription(com.salesmanager.core.model.reference.zone.Zone zone, com.salesmanager.core.model.reference.zone.ZoneDescription description) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * zone-get-zones
   */
  java.util.Map zoneGetZones(com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * zone-get-zones1
   */
  java.util.List zoneGetZones1(com.salesmanager.core.model.reference.country.Country country, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * zone-get-by-id
   */
  com.salesmanager.core.model.reference.zone.Zone zoneGetById(java.lang.Long id);

  /**
   * zone-count
   */
  java.lang.Long zoneCount();

  /**
   * zone-update
   */
  com.salesmanager.core.model.reference.zone.Zone zoneUpdate(com.salesmanager.core.model.reference.zone.Zone entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * zone-delete
   */
  void zoneDelete(com.salesmanager.core.model.reference.zone.Zone entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * zone-create
   */
  com.salesmanager.core.model.reference.zone.Zone zoneCreate(com.salesmanager.core.model.reference.zone.Zone entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * zone-list
   */
  java.util.List zoneList();

  /**
   * zone-save
   */
  com.salesmanager.core.model.reference.zone.Zone zoneSave(com.salesmanager.core.model.reference.zone.Zone entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * zone-flush
   */
  void zoneFlush();

  /**
   * permission-get-by-name
   */
  java.util.List permissionGetByName();

  /**
   * permission-get-by-id
   */
  com.salesmanager.core.model.user.Permission permissionGetById(java.lang.Integer permissionId);

  /**
   * permission-get-by-id1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity permissionGetById1(java.io.Serializable permissionId);

  /**
   * permission-delete-permission
   */
  void permissionDeletePermission(com.salesmanager.core.model.user.Permission permission) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-list-by-criteria
   */
  com.salesmanager.core.model.user.PermissionList permissionListByCriteria(com.salesmanager.core.model.user.PermissionCriteria criteria) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-remove-permission
   */
  void permissionRemovePermission(com.salesmanager.core.model.user.Permission permission, com.salesmanager.core.model.user.Group group) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-list-permission
   */
  java.util.List permissionListPermission() throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-get-permissions
   */
  java.util.List permissionGetPermissions(java.util.List groupIds) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-count
   */
  java.lang.Long permissionCount();

  /**
   * permission-update
   */
  com.salesmanager.core.model.user.Permission permissionUpdate(com.salesmanager.core.model.user.Permission entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-delete
   */
  void permissionDelete(com.salesmanager.core.model.user.Permission entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-create
   */
  com.salesmanager.core.model.user.Permission permissionCreate(com.salesmanager.core.model.user.Permission entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-list
   */
  java.util.List permissionList();

  /**
   * permission-save
   */
  com.salesmanager.core.model.user.Permission permissionSave(com.salesmanager.core.model.user.Permission entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * permission-flush
   */
  void permissionFlush();

  /**
   * email-get-email-configuration
   */
  com.salesmanager.core.model.email.EmailConfig emailGetEmailConfiguration(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * email-save-email-configuration
   */
  com.salesmanager.core.model.email.EmailConfig emailSaveEmailConfiguration(com.salesmanager.core.model.email.EmailConfig emailConfig, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * email-send-html-email
   */
  void emailSendHtmlEmail(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.email.Email email) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-get-by-id
   */
  com.salesmanager.core.model.generic.SalesManagerEntity productimageGetById(java.io.Serializable id);

  /**
   * productimage-get-by-id1
   */
  com.salesmanager.core.model.catalog.product.image.ProductImage productimageGetById1(java.lang.Long id);

  /**
   * productimage-save-or-update
   */
  com.salesmanager.core.model.catalog.product.image.ProductImage productimageSaveOrUpdate(com.salesmanager.core.model.catalog.product.image.ProductImage productImage) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-add-product-images
   */
  com.salesmanager.core.model.catalog.product.Product productimageAddProductImages(com.salesmanager.core.model.catalog.product.Product product, java.util.List productImages) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-add-product-image-description
   */
  com.salesmanager.core.model.catalog.product.image.ProductImage productimageAddProductImageDescription(com.salesmanager.core.model.catalog.product.image.ProductImage productImage, com.salesmanager.core.model.catalog.product.image.ProductImageDescription description) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-get-product-images
   */
  java.util.List productimageGetProductImages(com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-remove-product-image
   */
  void productimageRemoveProductImage(com.salesmanager.core.model.catalog.product.image.ProductImage productImage) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-get-product-image
   */
  com.salesmanager.core.model.content.OutputContentFile productimageGetProductImage(com.salesmanager.core.model.catalog.product.image.ProductImage productImage, com.salesmanager.core.model.catalog.product.file.ProductImageSize size) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-get-product-image1
   */
  com.salesmanager.core.model.content.OutputContentFile productimageGetProductImage1(String storeCode, String productCode, String fileName, com.salesmanager.core.model.catalog.product.file.ProductImageSize size) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-add-product-image
   */
  com.salesmanager.core.model.catalog.product.Product productimageAddProductImage(com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.catalog.product.image.ProductImage productImage, com.salesmanager.core.model.content.ImageContentFile inputImage) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-count
   */
  java.lang.Long productimageCount();

  /**
   * productimage-update
   */
  com.salesmanager.core.model.catalog.product.image.ProductImage productimageUpdate(com.salesmanager.core.model.catalog.product.image.ProductImage entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-delete
   */
  void productimageDelete(com.salesmanager.core.model.catalog.product.image.ProductImage entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-create
   */
  com.salesmanager.core.model.catalog.product.image.ProductImage productimageCreate(com.salesmanager.core.model.catalog.product.image.ProductImage entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-list
   */
  java.util.List productimageList();

  /**
   * productimage-save
   */
  com.salesmanager.core.model.catalog.product.image.ProductImage productimageSave(com.salesmanager.core.model.catalog.product.image.ProductImage entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productimage-flush
   */
  void productimageFlush();

  /**
   * taxclass-get-by-code
   */
  com.salesmanager.core.model.tax.taxclass.TaxClass taxclassGetByCode(String code) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-get-by-code1
   */
  com.salesmanager.core.model.tax.taxclass.TaxClass taxclassGetByCode1(String code, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-get-by-id
   */
  com.salesmanager.core.model.tax.taxclass.TaxClass taxclassGetById(java.lang.Long id);

  /**
   * taxclass-get-by-id1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity taxclassGetById1(java.io.Serializable id);

  /**
   * taxclass-list-by-store
   */
  java.util.List taxclassListByStore(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-delete
   */
  void taxclassDelete(com.salesmanager.core.model.generic.SalesManagerEntity taxClass) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-delete1
   */
  void taxclassDelete1(com.salesmanager.core.model.tax.taxclass.TaxClass taxClass) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-count
   */
  java.lang.Long taxclassCount();

  /**
   * taxclass-update
   */
  com.salesmanager.core.model.tax.taxclass.TaxClass taxclassUpdate(com.salesmanager.core.model.tax.taxclass.TaxClass entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-create
   */
  com.salesmanager.core.model.tax.taxclass.TaxClass taxclassCreate(com.salesmanager.core.model.tax.taxclass.TaxClass entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-list
   */
  java.util.List taxclassList();

  /**
   * taxclass-save
   */
  com.salesmanager.core.model.tax.taxclass.TaxClass taxclassSave(com.salesmanager.core.model.tax.taxclass.TaxClass entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxclass-flush
   */
  void taxclassFlush();

  /**
   * payment-get-payment-methods
   */
  java.util.List paymentGetPaymentMethods(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-get-accepted-payment-methods
   */
  java.util.List paymentGetAcceptedPaymentMethods(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-get-payment-method-by-type
   */
  com.salesmanager.core.model.system.IntegrationModule paymentGetPaymentMethodByType(com.salesmanager.core.model.merchant.MerchantStore store, String type) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-get-payment-method-by-code
   */
  com.salesmanager.core.model.system.IntegrationModule paymentGetPaymentMethodByCode(com.salesmanager.core.model.merchant.MerchantStore store, String code) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-get-payment-configuration
   */
  com.salesmanager.core.model.system.IntegrationConfiguration paymentGetPaymentConfiguration(String moduleCode, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-get-payment-modules-configured
   */
  java.util.Map paymentGetPaymentModulesConfigured(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-save-payment-module-configuration
   */
  com.salesmanager.core.model.system.IntegrationConfiguration paymentSavePaymentModuleConfiguration(com.salesmanager.core.model.system.IntegrationConfiguration configuration, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-remove-payment-module-configuration
   */
  void paymentRemovePaymentModuleConfiguration(String moduleCode, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-process-payment
   */
  com.salesmanager.core.model.payments.Transaction paymentProcessPayment(com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.payments.Payment payment, java.util.List items, com.salesmanager.core.model.order.Order order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-get-payment-module
   */
  com.salesmanager.core.modules.integration.payment.model.PaymentModule paymentGetPaymentModule(String paymentModuleCode) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-process-capture-payment
   */
  com.salesmanager.core.model.payments.Transaction paymentProcessCapturePayment(com.salesmanager.core.model.order.Order order, com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-process-refund
   */
  com.salesmanager.core.model.payments.Transaction paymentProcessRefund(com.salesmanager.core.model.order.Order order, com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store, java.math.BigDecimal amount) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * payment-validate-credit-card
   */
  void paymentValidateCreditCard(String number, com.salesmanager.core.model.payments.CreditCardType creditCard, String month, String date) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantlog-get-by-id
   */
  com.salesmanager.core.model.system.MerchantLog merchantlogGetById(java.lang.Long id);

  /**
   * merchantlog-count
   */
  java.lang.Long merchantlogCount();

  /**
   * merchantlog-update
   */
  com.salesmanager.core.model.system.MerchantLog merchantlogUpdate(com.salesmanager.core.model.system.MerchantLog entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantlog-delete
   */
  void merchantlogDelete(com.salesmanager.core.model.system.MerchantLog entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantlog-create
   */
  com.salesmanager.core.model.system.MerchantLog merchantlogCreate(com.salesmanager.core.model.system.MerchantLog entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantlog-list
   */
  java.util.List merchantlogList();

  /**
   * merchantlog-save
   */
  com.salesmanager.core.model.system.MerchantLog merchantlogSave(com.salesmanager.core.model.system.MerchantLog entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * merchantlog-flush
   */
  void merchantlogFlush();

  /**
   * manufacturer-get-by-code
   */
  com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturerGetByCode(com.salesmanager.core.model.merchant.MerchantStore store, String code);

  /**
   * manufacturer-save-or-update
   */
  com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturerSaveOrUpdate(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-list-by-store
   */
  java.util.List manufacturerListByStore(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-list-by-store1
   */
  java.util.List manufacturerListByStore1(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-get-count-manuf-attached-products
   */
  java.lang.Long manufacturerGetCountManufAttachedProducts(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-list-by-products-by-categories-id
   */
  java.util.List manufacturerListByProductsByCategoriesId(com.salesmanager.core.model.merchant.MerchantStore store, java.util.List ids, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-add-manufacturer-description
   */
  com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturerAddManufacturerDescription(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturer, com.salesmanager.core.model.catalog.product.manufacturer.ManufacturerDescription description) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-delete
   */
  void manufacturerDelete(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-delete1
   */
  void manufacturerDelete1(com.salesmanager.core.model.generic.SalesManagerEntity manufacturer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-get-by-id
   */
  com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturerGetById(java.lang.Long id);

  /**
   * manufacturer-count
   */
  java.lang.Long manufacturerCount();

  /**
   * manufacturer-update
   */
  com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturerUpdate(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-create
   */
  com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturerCreate(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-list
   */
  java.util.List manufacturerList();

  /**
   * manufacturer-save
   */
  com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturerSave(com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * manufacturer-flush
   */
  void manufacturerFlush();

  /**
   * search-delete-index
   */
  void searchDeleteIndex(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * search-search-for-keywords
   */
  com.salesmanager.core.model.search.SearchKeywords searchSearchForKeywords(String collectionName, String jsonString, int entriesCount) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * search-init-service
   */
  void searchInitService();

  /**
   * search-index
   */
  void searchIndex(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * search-search
   */
  com.salesmanager.core.model.search.SearchResponse searchSearch(com.salesmanager.core.model.merchant.MerchantStore store, String languageCode, String jsonString, int entriesCount, int startIndex) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-save-or-update
   */
  com.salesmanager.core.model.order.Order orderSaveOrUpdate(com.salesmanager.core.model.order.Order order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-list-by-store
   */
  com.salesmanager.core.model.order.OrderList orderListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.order.OrderCriteria criteria);

  /**
   * order-add-order-status-history
   */
  com.salesmanager.core.model.order.Order orderAddOrderStatusHistory(com.salesmanager.core.model.order.Order order, com.salesmanager.core.model.order.orderstatus.OrderStatusHistory history) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-calculate-shopping-cart-total
   */
  com.salesmanager.core.model.order.OrderTotalSummary orderCalculateShoppingCartTotal(com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingCart, com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-calculate-shopping-cart-total1
   */
  com.salesmanager.core.model.order.OrderTotalSummary orderCalculateShoppingCartTotal1(com.salesmanager.core.model.shoppingcart.ShoppingCart shoppingCart, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-caculate-order-total
   */
  com.salesmanager.core.model.order.OrderTotalSummary orderCaculateOrderTotal(com.salesmanager.core.model.order.OrderSummary orderSummary, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-caculate-order-total1
   */
  com.salesmanager.core.model.order.OrderTotalSummary orderCaculateOrderTotal1(com.salesmanager.core.model.order.OrderSummary orderSummary, com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-generate-invoice
   */
  java.io.ByteArrayOutputStream orderGenerateInvoice(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.order.Order order, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-get-order
   */
  com.salesmanager.core.model.order.Order orderGetOrder(java.lang.Long orderId);

  /**
   * order-process-order
   */
  com.salesmanager.core.model.order.Order orderProcessOrder(com.salesmanager.core.model.order.Order order, com.salesmanager.core.model.customer.Customer customer, java.util.List items, com.salesmanager.core.model.order.OrderTotalSummary summary, com.salesmanager.core.model.payments.Payment payment, com.salesmanager.core.model.payments.Transaction transaction, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-process-order1
   */
  com.salesmanager.core.model.order.Order orderProcessOrder1(com.salesmanager.core.model.order.Order order, com.salesmanager.core.model.customer.Customer customer, java.util.List items, com.salesmanager.core.model.order.OrderTotalSummary summary, com.salesmanager.core.model.payments.Payment payment, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-has-download-files
   */
  boolean orderHasDownloadFiles(com.salesmanager.core.model.order.Order order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-delete
   */
  void orderDelete(com.salesmanager.core.model.order.Order order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-delete1
   */
  void orderDelete1(com.salesmanager.core.model.generic.SalesManagerEntity order) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-get-by-id
   */
  com.salesmanager.core.model.order.Order orderGetById(java.lang.Long id);

  /**
   * order-count
   */
  java.lang.Long orderCount();

  /**
   * order-update
   */
  com.salesmanager.core.model.order.Order orderUpdate(com.salesmanager.core.model.order.Order entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-create
   */
  com.salesmanager.core.model.order.Order orderCreate(com.salesmanager.core.model.order.Order entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-list
   */
  java.util.List orderList();

  /**
   * order-save
   */
  com.salesmanager.core.model.order.Order orderSave(com.salesmanager.core.model.order.Order entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * order-flush
   */
  void orderFlush();

  /**
   * taxrate-get-by-code
   */
  com.salesmanager.core.model.tax.taxrate.TaxRate taxrateGetByCode(String code, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-list-by-country-state-province-and-tax-class
   */
  java.util.List taxrateListByCountryStateProvinceAndTaxClass(com.salesmanager.core.model.reference.country.Country country, String stateProvince, com.salesmanager.core.model.tax.taxclass.TaxClass taxClass, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-list-by-country-zone-and-tax-class
   */
  java.util.List taxrateListByCountryZoneAndTaxClass(com.salesmanager.core.model.reference.country.Country country, com.salesmanager.core.model.reference.zone.Zone zone, com.salesmanager.core.model.tax.taxclass.TaxClass taxClass, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-list-by-store
   */
  java.util.List taxrateListByStore(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-list-by-store1
   */
  java.util.List taxrateListByStore1(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-delete
   */
  void taxrateDelete(com.salesmanager.core.model.tax.taxrate.TaxRate taxRate) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-delete1
   */
  void taxrateDelete1(com.salesmanager.core.model.generic.SalesManagerEntity taxRate) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-get-by-id
   */
  com.salesmanager.core.model.tax.taxrate.TaxRate taxrateGetById(java.lang.Long id);

  /**
   * taxrate-count
   */
  java.lang.Long taxrateCount();

  /**
   * taxrate-update
   */
  com.salesmanager.core.model.tax.taxrate.TaxRate taxrateUpdate(com.salesmanager.core.model.tax.taxrate.TaxRate entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-create
   */
  com.salesmanager.core.model.tax.taxrate.TaxRate taxrateCreate(com.salesmanager.core.model.tax.taxrate.TaxRate entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-list
   */
  java.util.List taxrateList();

  /**
   * taxrate-save
   */
  com.salesmanager.core.model.tax.taxrate.TaxRate taxrateSave(com.salesmanager.core.model.tax.taxrate.TaxRate entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * taxrate-flush
   */
  void taxrateFlush();

  /**
   * customeroptionvalue-get-by-code
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionValue customeroptionvalueGetByCode(com.salesmanager.core.model.merchant.MerchantStore store, String optionValueCode);

  /**
   * customeroptionvalue-save-or-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionValue customeroptionvalueSaveOrUpdate(com.salesmanager.core.model.customer.attribute.CustomerOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionvalue-list-by-store
   */
  java.util.List customeroptionvalueListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionvalue-delete
   */
  void customeroptionvalueDelete(com.salesmanager.core.model.generic.SalesManagerEntity customerOptionValue) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionvalue-delete1
   */
  void customeroptionvalueDelete1(com.salesmanager.core.model.customer.attribute.CustomerOptionValue customerOptionValue) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionvalue-get-by-id
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionValue customeroptionvalueGetById(java.lang.Long id);

  /**
   * customeroptionvalue-count
   */
  java.lang.Long customeroptionvalueCount();

  /**
   * customeroptionvalue-update
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionValue customeroptionvalueUpdate(com.salesmanager.core.model.customer.attribute.CustomerOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionvalue-create
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionValue customeroptionvalueCreate(com.salesmanager.core.model.customer.attribute.CustomerOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionvalue-list
   */
  java.util.List customeroptionvalueList();

  /**
   * customeroptionvalue-save
   */
  com.salesmanager.core.model.customer.attribute.CustomerOptionValue customeroptionvalueSave(com.salesmanager.core.model.customer.attribute.CustomerOptionValue entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * customeroptionvalue-flush
   */
  void customeroptionvalueFlush();

  /**
   * productavailability-save-or-update
   */
  com.salesmanager.core.model.catalog.product.availability.ProductAvailability productavailabilitySaveOrUpdate(com.salesmanager.core.model.catalog.product.availability.ProductAvailability availability) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productavailability-get-by-id
   */
  com.salesmanager.core.model.catalog.product.availability.ProductAvailability productavailabilityGetById(java.lang.Long id);

  /**
   * productavailability-count
   */
  java.lang.Long productavailabilityCount();

  /**
   * productavailability-update
   */
  com.salesmanager.core.model.catalog.product.availability.ProductAvailability productavailabilityUpdate(com.salesmanager.core.model.catalog.product.availability.ProductAvailability entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productavailability-delete
   */
  void productavailabilityDelete(com.salesmanager.core.model.catalog.product.availability.ProductAvailability entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productavailability-create
   */
  com.salesmanager.core.model.catalog.product.availability.ProductAvailability productavailabilityCreate(com.salesmanager.core.model.catalog.product.availability.ProductAvailability entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productavailability-list
   */
  java.util.List productavailabilityList();

  /**
   * productavailability-save
   */
  com.salesmanager.core.model.catalog.product.availability.ProductAvailability productavailabilitySave(com.salesmanager.core.model.catalog.product.availability.ProductAvailability entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productavailability-flush
   */
  void productavailabilityFlush();

  /**
   * group-list-group-by-ids
   */
  java.util.List groupListGroupByIds(java.util.Set ids) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * group-list-group
   */
  java.util.List groupListGroup(com.salesmanager.core.model.user.GroupType groupType) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * group-get-by-id
   */
  com.salesmanager.core.model.user.Group groupGetById(java.lang.Integer id);

  /**
   * group-count
   */
  java.lang.Long groupCount();

  /**
   * group-update
   */
  com.salesmanager.core.model.user.Group groupUpdate(com.salesmanager.core.model.user.Group entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * group-delete
   */
  void groupDelete(com.salesmanager.core.model.user.Group entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * group-create
   */
  com.salesmanager.core.model.user.Group groupCreate(com.salesmanager.core.model.user.Group entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * group-list
   */
  java.util.List groupList();

  /**
   * group-save
   */
  com.salesmanager.core.model.user.Group groupSave(com.salesmanager.core.model.user.Group entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * group-flush
   */
  void groupFlush();

  /**
   * systemconfiguration-get-by-key
   */
  com.salesmanager.core.model.system.SystemConfiguration systemconfigurationGetByKey(String key) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * systemconfiguration-get-by-id
   */
  com.salesmanager.core.model.system.SystemConfiguration systemconfigurationGetById(java.lang.Long id);

  /**
   * systemconfiguration-count
   */
  java.lang.Long systemconfigurationCount();

  /**
   * systemconfiguration-update
   */
  com.salesmanager.core.model.system.SystemConfiguration systemconfigurationUpdate(com.salesmanager.core.model.system.SystemConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * systemconfiguration-delete
   */
  void systemconfigurationDelete(com.salesmanager.core.model.system.SystemConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * systemconfiguration-create
   */
  com.salesmanager.core.model.system.SystemConfiguration systemconfigurationCreate(com.salesmanager.core.model.system.SystemConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * systemconfiguration-list
   */
  java.util.List systemconfigurationList();

  /**
   * systemconfiguration-save
   */
  com.salesmanager.core.model.system.SystemConfiguration systemconfigurationSave(com.salesmanager.core.model.system.SystemConfiguration entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * systemconfiguration-flush
   */
  void systemconfigurationFlush();

  /**
   * product-get-by-code
   */
  com.salesmanager.core.model.catalog.product.Product productGetByCode(String productCode, com.salesmanager.core.model.reference.language.Language language);

  /**
   * product-get-by-id
   */
  com.salesmanager.core.model.catalog.product.Product productGetById(java.lang.Long productId);

  /**
   * product-get-by-id1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity productGetById1(java.io.Serializable productId);

  /**
   * product-get-by-se-url
   */
  com.salesmanager.core.model.catalog.product.Product productGetBySeUrl(com.salesmanager.core.model.merchant.MerchantStore store, String seUrl, java.util.Locale locale);

  /**
   * product-get-products
   */
  java.util.List productGetProducts(java.util.List categoryIds, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-get-products1
   */
  java.util.List productGetProducts1(java.util.List categoryIds) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-list-by-store
   */
  com.salesmanager.core.model.catalog.product.ProductList productListByStore(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language, com.salesmanager.core.model.catalog.product.ProductCriteria criteria);

  /**
   * product-list-by-store1
   */
  java.util.List productListByStore1(com.salesmanager.core.model.merchant.MerchantStore store);

  /**
   * product-add-product-description
   */
  com.salesmanager.core.model.catalog.product.Product productAddProductDescription(com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.catalog.product.description.ProductDescription description) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-get-product-description
   */
  com.salesmanager.core.model.catalog.product.description.ProductDescription productGetProductDescription(com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.reference.language.Language language);

  /**
   * product-get-product-for-locale
   */
  com.salesmanager.core.model.catalog.product.Product productGetProductForLocale(long productId, com.salesmanager.core.model.reference.language.Language language, java.util.Locale locale) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-get-products-for-locale
   */
  java.util.List productGetProductsForLocale(com.salesmanager.core.model.catalog.category.Category category, com.salesmanager.core.model.reference.language.Language language, java.util.Locale locale) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-list-by-tax-class
   */
  java.util.List productListByTaxClass(com.salesmanager.core.model.tax.taxclass.TaxClass taxClass);

  /**
   * product-update
   */
  com.salesmanager.core.model.generic.SalesManagerEntity productUpdate(com.salesmanager.core.model.generic.SalesManagerEntity product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-update1
   */
  com.salesmanager.core.model.catalog.product.Product productUpdate1(com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-delete
   */
  void productDelete(com.salesmanager.core.model.generic.SalesManagerEntity product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-delete1
   */
  void productDelete1(com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-create
   */
  com.salesmanager.core.model.catalog.product.Product productCreate(com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-create1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity productCreate1(com.salesmanager.core.model.generic.SalesManagerEntity product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-count
   */
  java.lang.Long productCount();

  /**
   * product-list
   */
  java.util.List productList();

  /**
   * product-save
   */
  com.salesmanager.core.model.catalog.product.Product productSave(com.salesmanager.core.model.catalog.product.Product entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * product-flush
   */
  void productFlush();

  /**
   * user-save-or-update
   */
  com.salesmanager.core.model.user.User userSaveOrUpdate(com.salesmanager.core.model.user.User user) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-list-by-store
   */
  java.util.List userListByStore(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-get-by-user-name
   */
  com.salesmanager.core.model.user.User userGetByUserName(String userName) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-list-user
   */
  java.util.List userListUser() throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-delete
   */
  void userDelete(com.salesmanager.core.model.user.User user) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-delete1
   */
  void userDelete1(com.salesmanager.core.model.generic.SalesManagerEntity user) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-get-by-id
   */
  com.salesmanager.core.model.user.User userGetById(java.lang.Long id);

  /**
   * user-count
   */
  java.lang.Long userCount();

  /**
   * user-update
   */
  com.salesmanager.core.model.user.User userUpdate(com.salesmanager.core.model.user.User entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-create
   */
  com.salesmanager.core.model.user.User userCreate(com.salesmanager.core.model.user.User entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-list
   */
  java.util.List userList();

  /**
   * user-save
   */
  com.salesmanager.core.model.user.User userSave(com.salesmanager.core.model.user.User entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * user-flush
   */
  void userFlush();

  /**
   * productattribute-get-by-id
   */
  com.salesmanager.core.model.generic.SalesManagerEntity productattributeGetById(java.io.Serializable id);

  /**
   * productattribute-get-by-id1
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductAttribute productattributeGetById1(java.lang.Long id);

  /**
   * productattribute-save-or-update
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductAttribute productattributeSaveOrUpdate(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute productAttribute) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-get-by-option-id
   */
  java.util.List productattributeGetByOptionId(com.salesmanager.core.model.merchant.MerchantStore store, java.lang.Long id) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-get-by-option-value-id
   */
  java.util.List productattributeGetByOptionValueId(com.salesmanager.core.model.merchant.MerchantStore store, java.lang.Long id) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-get-by-product-id
   */
  java.util.List productattributeGetByProductId(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-get-by-attribute-ids
   */
  java.util.List productattributeGetByAttributeIds(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.Product product, java.util.List ids) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-delete
   */
  void productattributeDelete(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute attribute) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-delete1
   */
  void productattributeDelete1(com.salesmanager.core.model.generic.SalesManagerEntity attribute) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-count
   */
  java.lang.Long productattributeCount();

  /**
   * productattribute-update
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductAttribute productattributeUpdate(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-create
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductAttribute productattributeCreate(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-list
   */
  java.util.List productattributeList();

  /**
   * productattribute-save
   */
  com.salesmanager.core.model.catalog.product.attribute.ProductAttribute productattributeSave(com.salesmanager.core.model.catalog.product.attribute.ProductAttribute entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productattribute-flush
   */
  void productattributeFlush();

  /**
   * digitalproduct-save-or-update
   */
  com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalproductSaveOrUpdate(com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalProduct) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-get-by-product
   */
  com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalproductGetByProduct(com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-add-product-file
   */
  com.salesmanager.core.model.catalog.product.Product digitalproductAddProductFile(com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalProduct, com.salesmanager.core.model.content.InputContentFile inputFile) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-delete
   */
  void digitalproductDelete(com.salesmanager.core.model.generic.SalesManagerEntity digitalProduct) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-delete1
   */
  void digitalproductDelete1(com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalProduct) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-get-by-id
   */
  com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalproductGetById(java.lang.Long id);

  /**
   * digitalproduct-count
   */
  java.lang.Long digitalproductCount();

  /**
   * digitalproduct-update
   */
  com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalproductUpdate(com.salesmanager.core.model.catalog.product.file.DigitalProduct entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-create
   */
  com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalproductCreate(com.salesmanager.core.model.catalog.product.file.DigitalProduct entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-list
   */
  java.util.List digitalproductList();

  /**
   * digitalproduct-save
   */
  com.salesmanager.core.model.catalog.product.file.DigitalProduct digitalproductSave(com.salesmanager.core.model.catalog.product.file.DigitalProduct entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * digitalproduct-flush
   */
  void digitalproductFlush();

  /**
   * pricing-get-display-amount
   */
  String pricingGetDisplayAmount(java.math.BigDecimal amount, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * pricing-get-display-amount1
   */
  String pricingGetDisplayAmount1(java.math.BigDecimal amount, java.util.Locale locale, com.salesmanager.core.model.reference.currency.Currency currency, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * pricing-calculate-product-price
   */
  com.salesmanager.core.model.catalog.product.price.FinalPrice pricingCalculateProductPrice(com.salesmanager.core.model.catalog.product.Product product, java.util.List attributes, com.salesmanager.core.model.customer.Customer customer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * pricing-calculate-product-price1
   */
  com.salesmanager.core.model.catalog.product.price.FinalPrice pricingCalculateProductPrice1(com.salesmanager.core.model.catalog.product.Product product, java.util.List attributes) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * pricing-calculate-product-price2
   */
  com.salesmanager.core.model.catalog.product.price.FinalPrice pricingCalculateProductPrice2(com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.customer.Customer customer) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * pricing-calculate-product-price3
   */
  com.salesmanager.core.model.catalog.product.price.FinalPrice pricingCalculateProductPrice3(com.salesmanager.core.model.catalog.product.Product product) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * pricing-get-string-amount
   */
  String pricingGetStringAmount(java.math.BigDecimal amount, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * tax-get-tax-configuration
   */
  com.salesmanager.core.model.tax.TaxConfiguration taxGetTaxConfiguration(com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * tax-save-tax-configuration
   */
  com.salesmanager.core.model.tax.TaxConfiguration taxSaveTaxConfiguration(com.salesmanager.core.model.tax.TaxConfiguration shippingConfiguration, com.salesmanager.core.model.merchant.MerchantStore store) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * tax-calculate-tax
   */
  java.util.List taxCalculateTax(com.salesmanager.core.model.order.OrderSummary orderSummary, com.salesmanager.core.model.customer.Customer customer, com.salesmanager.core.model.merchant.MerchantStore store, com.salesmanager.core.model.reference.language.Language language) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productreview-get-by-customer
   */
  java.util.List productreviewGetByCustomer(com.salesmanager.core.model.customer.Customer customer);

  /**
   * productreview-get-by-product-no-customers
   */
  java.util.List productreviewGetByProductNoCustomers(com.salesmanager.core.model.catalog.product.Product product);

  /**
   * productreview-get-by-product
   */
  java.util.List productreviewGetByProduct(com.salesmanager.core.model.catalog.product.Product product, com.salesmanager.core.model.reference.language.Language language);

  /**
   * productreview-get-by-product1
   */
  java.util.List productreviewGetByProduct1(com.salesmanager.core.model.catalog.product.Product product);

  /**
   * productreview-get-by-product-and-customer
   */
  com.salesmanager.core.model.catalog.product.review.ProductReview productreviewGetByProductAndCustomer(java.lang.Long productId, java.lang.Long customerId);

  /**
   * productreview-create
   */
  com.salesmanager.core.model.catalog.product.review.ProductReview productreviewCreate(com.salesmanager.core.model.catalog.product.review.ProductReview review) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productreview-create1
   */
  com.salesmanager.core.model.generic.SalesManagerEntity productreviewCreate1(com.salesmanager.core.model.generic.SalesManagerEntity review) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productreview-get-by-id
   */
  com.salesmanager.core.model.catalog.product.review.ProductReview productreviewGetById(java.lang.Long id);

  /**
   * productreview-count
   */
  java.lang.Long productreviewCount();

  /**
   * productreview-update
   */
  com.salesmanager.core.model.catalog.product.review.ProductReview productreviewUpdate(com.salesmanager.core.model.catalog.product.review.ProductReview entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productreview-delete
   */
  void productreviewDelete(com.salesmanager.core.model.catalog.product.review.ProductReview entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productreview-list
   */
  java.util.List productreviewList();

  /**
   * productreview-save
   */
  com.salesmanager.core.model.catalog.product.review.ProductReview productreviewSave(com.salesmanager.core.model.catalog.product.review.ProductReview entity) throws com.salesmanager.core.business.exception.ServiceException;

  /**
   * productreview-flush
   */
  void productreviewFlush();
}
