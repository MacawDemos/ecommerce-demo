//
//  This file was auto-generated by Macaw tools 0.9.5-CR2-SNAPSHOT version built on Fri, 29 Dec 2017 11:56:52 +0530 
//
package com.salesmanager.core.business.services.macaw;

import java.io.IOException;
import java.lang.Class;
import java.lang.ClassNotFoundException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class JsonConverter implements com.cfx.service.api.MethodConverter {
  private static final com.google.gson.Gson serGson;

  private static final com.google.gson.Gson deserGson;

  static {
    com.google.gson.GsonBuilder serGb = new com.google.gson.GsonBuilder();
    serGb.disableHtmlEscaping();
    serGb.enableComplexMapKeySerialization();
    serGb.registerTypeAdapter(java.util.Date.class, new com.google.gson.JsonSerializer<java.util.Date>() {
      @java.lang.Override
          public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {
            return src == null ? null : new com.google.gson.JsonPrimitive(src.getTime());
          }
          ;
    } );
    com.google.gson.GsonBuilder deserGb = new com.google.gson.GsonBuilder();
    deserGb.registerTypeAdapter(java.util.Date.class, new com.google.gson.JsonDeserializer<java.util.Date>() {
      @java.lang.Override
          public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {
            return json == null ? null : new java.util.Date(json.getAsLong());
          }
          ;
    } );
    serGson = serGb.create();
    deserGson = deserGb.create();
  }

  public JsonConverter() {
  }

  private static Class loadClass(final String className) throws ClassNotFoundException {
    if (className.equals(void.class.getName())) {
      return void.class;
    }
    if (className.equals(short.class.getName())) {
      return short.class;
    }
    if (className.equals(byte.class.getName())) {
      return byte.class;
    }
    if (className.equals(int.class.getName())) {
      return int.class;
    }
    if (className.equals(long.class.getName())) {
      return long.class;
    }
    if (className.equals(float.class.getName())) {
      return float.class;
    }
    if (className.equals(char.class.getName())) {
      return char.class;
    }
    if (className.equals(boolean.class.getName())) {
      return boolean.class;
    }
    if (className.equals(double.class.getName())) {
      return double.class;
    }
    return Class.forName(className);
  }

  @Override
  public String convertObjectToTarget(Object arg, String typeClassName) {
    return serGson.toJson(arg);
  }

  @Override
  public Object convertObjectFromTarget(Object arg, String typeClassName) {
    if(arg != null && arg instanceof String) {
      String param = arg.toString();
      switch (typeClassName) {
        case "com.cfx.service.api.search.Criteria": return param.trim().equals("null") ? null : com.cfx.service.api.search.JsonCriteriaBuilder.forNewCriteria().fromJson(param);
      }
      Class<?> klass;
      try  {
        klass = this.loadClass(typeClassName);
        return deserGson.fromJson(param, klass);
      } catch (ClassNotFoundException e) {
        throw new RuntimeException("Unable to load class for: " + typeClassName , e);
      }
      catch (com.google.gson.JsonSyntaxException e) {
        throw new IllegalArgumentException("Invalid value : " + param , e);
      }
    }
    return null;
  }

  private static final class LowerCaseEnumTypeAdapter<T extends Enum<T>> extends com.google.gson.TypeAdapter<T> {
    private Map<java.lang.String, T> nameToEnumConstant;

    private Map<T, java.lang.String> constantToName;

    LowerCaseEnumTypeAdapter(final Class<T> enumClass) {
      this.nameToEnumConstant = new HashMap<>();
      this.constantToName = new HashMap<>();
      for (T constant : enumClass.getEnumConstants()) {
        final String name = constant.name();
        this.nameToEnumConstant.put(name.toLowerCase(Locale.ENGLISH), constant);
        this.constantToName.put(constant, name);
      }
    }

    @Override
    public void write(final com.google.gson.stream.JsonWriter writer, final T value) throws IOException {
      if (value == null) {
        writer.value((String) null);
        return;
      }
      writer.value(constantToName.get(value));
    }

    @Override
    public T read(final com.google.gson.stream.JsonReader reader) throws IOException {
      if (reader.peek() == com.google.gson.stream.JsonToken.NULL) {
        reader.nextNull();
        return null;
      }
      final String enumName = reader.nextString();
      return nameToEnumConstant.get(enumName.toLowerCase(Locale.ENGLISH));
    }
  }
}
